{load_file("stdgui.hoc")}
{load_file("template_CPGCell.hoc")}
{load_file("template_syncon.hoc")}
print " \n**********CPG Program**********\n"

strdef tstr,tstr0

proc CPGMain() {
	ResetParameters()
	CreateCPGCells()
	BuildAllExtConnections()
	BuildAllInhConnections()
	InitializeAllw()
	InitializeAllccl()
	PositionAllCPGCell()
	MainGUI("CPG - 2.0",0,0,900,700)
}

////////////////////////////////////////////////////////////////////////////////

proc ResetParameters() {
	erest = -72
	{units(&erest,"mV")}
	v_init = erest
	CellNum = 4
	allthreshold = 0
	{units(&allthreshold,"mV")}
	alldelay = 15
	{units(&alldelay,"ms")}
	tstop = 1000
	dt = .1
	steps_per_ms = 10
	default_syn_wgt = 100
}

////////////////////////////////////////////////////////////////////////////////

objref CPGCellList
CPGCellList = new List()

proc CreateCPGCells() { local i
	DeleteCPGCells()
	for i=0,CellNum-1 CPGCellList.append(new CPGCell())
	print "CPGCells are created.\n"
}

proc DeleteCPGCells() {
	CPGCellList.remove_all()
}

////////////////////////////////////////////////////////////////////////////////

proc PositionOneCPGCell() {
	CPGCellList.o($1).Xpos = $2
	CPGCellList.o($1).Ypos = $3
	CPGCellList.o($1).name = $s4
}

proc PositionAllCPGCell() { local i
	PositionOneCPGCell(0,20,80,"L1")
	PositionOneCPGCell(1,20,20,"L2")
	PositionOneCPGCell(2,80,80,"R1")
	PositionOneCPGCell(3,80,20,"R2")
}

////////////////////////////////////////////////////////////////////////////////

SynNum = CellNum*(CellNum-1)
objref ExtSynConList,InhSynConList
ExtSynConList = new List()
InhSynConList = new List()

proc BuildAllExtConnections() { local i,j,k
	k = 0
	for i=0,CellNum-1 {
		for j=0,CellNum-1 {
			if (i!=j) {
				ExtSynConList.append(new SynCon("CPGCell",i,"CPGCell",j))
				CPGCellList.o(j).dend{
					ExtSynConList.o(k).syn = new ext(.5)
				}
				access CPGCellList.o(i).soma
				ExtSynConList.o(k).netcon = new NetCon(&v(.5),ExtSynConList.o(k).syn,allthreshold,alldelay,1)
				ExtSynConList.o(k).syn.w = 0
				printf("Excitatory synaptic connection #%d is built from %s[%d] to %s[%d]\n",k,ExtSynConList.o(k).pre_type,ExtSynConList.o(k).pre_index,ExtSynConList.o(k).post_type,ExtSynConList.o(k).post_index)
				k = k+1
			}
		}
	}
	print " "
}

proc BuildAllInhConnections() { local i,j,k
	k = 0
	for i=0,CellNum-1 {
		for j=0,CellNum-1 {
			if (i!=j) {
				InhSynConList.append(new SynCon("CPGCell",i,"CPGCell",j))
				CPGCellList.o(j).dend{
					InhSynConList.o(k).syn = new inh(.5)
				}
				access CPGCellList.o(i).soma
				InhSynConList.o(k).netcon = new NetCon(&v(.5),InhSynConList.o(k).syn,allthreshold,alldelay,1)
				InhSynConList.o(k).syn.w = 0
				InhSynConList.o(k).syn.einh = -75
				InhSynConList.o(k).syn.tau = 25
				printf("Inhibitory synaptic connection #%d is built from %s[%d] to %s[%d]\n",k,InhSynConList.o(k).pre_type,InhSynConList.o(k).pre_index,InhSynConList.o(k).post_type,InhSynConList.o(k).post_index)
				k = k+1
			}
		}
	}
	print " "
}

proc InitializeAllw() {	
	for i = 0,11 {
		ExtSynConList.o(i).syn.w = 0
		InhSynConList.o(0).syn.w = 40
	}
	
	ExtSynConList.o(0).syn.w = 40
	ExtSynConList.o(4).syn.w = 40
	ExtSynConList.o(9).syn.w = 40
	ExtSynConList.o(8).syn.w = 40
	
	InhSynConList.o(2).syn.w = default_syn_wgt
	InhSynConList.o(1).syn.w = default_syn_wgt
	InhSynConList.o(3).syn.w = default_syn_wgt
	InhSynConList.o(5).syn.w = default_syn_wgt
	InhSynConList.o(6).syn.w = default_syn_wgt
	InhSynConList.o(11).syn.w = default_syn_wgt
	InhSynConList.o(7).syn.w = default_syn_wgt
	InhSynConList.o(10).syn.w = default_syn_wgt
}

////////////////////////////////////////////////////////////////////////////////

proc InitializeAllccl() { local i
	for i=0,CellNum-1 {
		CPGCellList.o(i).ccl.del = 0
		CPGCellList.o(i).ccl.dur = 1000
		CPGCellList.o(i).ccl.amp = 0
	}
		CPGCellList.o(0).ccl.amp = 0.2
}

////////////////////////////////////////////////////////////////////////////////

SubVBoxNum = 3
objref MainHBoxObj,SubVBoxObj[SubVBoxNum]

proc MainGUI() {local i
	MainHBoxObj = new HBox()
	for i=0,SubVBoxNum-1 SubVBoxObj[i] = new VBox()
	SubVBoxObj[0].intercept(1)
		newNetworkGraph()
		newPlot4Voltage()
		GraphDeck()
	SubVBoxObj[0].intercept(0)
	SubVBoxObj[1].intercept(1)
		ChoiceBoxLv1()
		cclDeck()
		ChoiceBoxLv2Deck()
		SynPropertyDeck()
	SubVBoxObj[1].intercept(0)
	SubVBoxObj[2].intercept(1)
		nrncontrolmenu()
		xpanel(" ")
			xlabel(" ")
			xbutton("Remove all Connections","RemoveAllCon()")
			//xbutton("Restore Default Connections","RestoreDefaultWgt()")
			xbutton("Wave of Activation","WaveofAct()")
			xbutton("Walk","Walk()")
			xbutton("Trot","Trot()")
			xbutton("Pace (FOR YOU TO DO)","Pace()")
			xlabel(" ")
			xlabel("Press QUIT to quit the CPG Program ")
			xbutton("QUIT","quit()")
			xlabel(" ")
		xpanel(0)
	SubVBoxObj[2].intercept(0)
	MainHBoxObj.intercept(1)
		for i=0,SubVBoxNum-1 SubVBoxObj[i].map()
	MainHBoxObj.intercept(0)
	MainHBoxObj.map($s1,$2,$3,$4,$5)
}

////////////////////////////////////////////////////////////////////////////////

objref NetworkGraph

proc newNetworkGraph() {
	NetworkGraph = new Graph()
	NetworkGraph.size(-25,125,0,100)
	NetworkGraph.yaxis(3)
	PlaceCPGCells()
	InitDrawAllConnections()
}

proc newPlot4Voltage() {
	newPlot(0,tstop,-400,400)
	graphItem.save_name("graphList[0].")
	graphList[0].append(graphItem)
	graphItem.label(2,2)
	graphItem.addexpr("CPGCellList.o(0).soma.v(.5)+250",2,1)
	graphItem.addexpr("CPGCellList.o(1).soma.v(.5)+100",3,1)
	graphItem.addexpr("CPGCellList.o(2).soma.v(.5)-100",4,1)
	graphItem.addexpr("CPGCellList.o(3).soma.v(.5)-250",5,1)
	graphItem.label(50,200,"L1",1,1,.5,.5,2)
	graphItem.label(50,50,"L2",1,1,.5,.5,3)
	graphItem.label(50,-150,"R1",1,1,.5,.5,4)
	graphItem.label(50,-300,"R2",1,1,.5,.5,5)
	graphItem.label(0,450,"(No Unit)",1,1,.5,.5,1)
}

objref GraphDeckObj
GraphDeckObj = new Deck()

proc GraphDeck() { local i
	for i=0,CellNum-1 {
		GraphDeckObj.intercept(1)
			newPlotVoltage(i)
		GraphDeckObj.intercept(0)
	}
	GraphDeckObj.map()
	GraphDeckObj.flip_to(0)
}

proc newPlotVoltage() { local i
	newPlot(0,tstop,-100,50)
	graphItem.save_name("graphList[0].")
	graphList[0].append(graphItem)
	graphItem.label(2,2)
	sprint(tstr,"graphItem.addexpr(\"CPGCellList.o(%d).soma.v(.5)\",%d,2)",$1,$1+2)
	execute(tstr)
	sprint(tstr,"graphItem.label(tstop/2,50,\"%s soma Vm\",1,1,.5,.5,%d)",CPGCellList.o($1).name,$1+2)
	execute(tstr)
	graphItem.label(0,60,"(mV)",1,1,.5,.5,1)
}

////////////////////////////////////////////////////////////////////////////////

proc PlaceCPGCells() { local i,x,y
	for i=0,CellNum-1 {
		x = CPGCellList.o(i).Xpos
		y = CPGCellList.o(i).Ypos
		tstr = CPGCellList.o(i).name
		NetworkGraph.mark(x,y,"O",50,3,0)
		NetworkGraph.label(x,y,tstr,1,1,.5,.5,0)
	}
}

proc InitDrawAllConnections() { local i,preind,postind
	DrawL12L2(2)
	DrawL12R1(1)
	DrawL12R2(1)
	DrawL22L1(1)
	DrawL22R1(2)
	DrawL22R2(1)
	DrawR12L1(1)
	DrawR12L2(1)
	DrawR12R2(2)
	DrawR22L1(2)
	DrawR22L2(1)
	DrawR22R1(1)
}

proc DrawL12L2() {
	DrawOneConnection($1,23,65,23,35)
}

proc DrawL12R1() {
	DrawOneConnection($1,35,83,65,83)
}

proc DrawL12R2() {
	DrawOneConnection($1,32,72,72,32)
}

proc DrawL22L1() {
	DrawOneConnection($1,17,35,17,65)
}

proc DrawL22R1() {
	DrawOneConnection($1,28,32,68,72)
}

proc DrawL22R2() {
	DrawOneConnection($1,35,23,65,23)
}

proc DrawR12L1() {
	DrawOneConnection($1,65,77,35,77)
}

proc DrawR12L2() {
	DrawOneConnection($1,72,68,32,28)
}

proc DrawR12R2() {
	DrawOneConnection($1,83,65,83,35)
}

proc DrawR22L1() {
	DrawOneConnection($1,68,28,28,68)
}

proc DrawR22L2() {
	DrawOneConnection($1,65,17,35,17)
}

proc DrawR22R1() {
	DrawOneConnection($1,77,35,77,65)
}

proc DrawOneConnection() { local d,k2,halfdx,halfdy,x3,y3,x4,y4
	NetworkGraph.beginline(2*$1,4)
	NetworkGraph.line($2,$3)
	NetworkGraph.line($4,$5)
	d = 5
	if (($5!=$3)&&($4!=$2)) {
		k2 = -($4-$2)/($5-$3)
		halfdx = d/(2*((k2^2)+1)^(1/2))
		halfdy = k2*halfdx
	} else if (($5==$3)&&($4!=$2)) {
		k2 = 1e9
		halfdx = 0
		halfdy = 2.5
	} else if (($5!=$3)&&($4==$2)) {
		k2 = 0
		halfdx = 2.5
		halfdy = 0
	}
	x3 = $4-halfdx
	y3 = $5-halfdy
	x4 = $4+halfdx
	y4 = $5+halfdy
	NetworkGraph.line(x3,y3)
	NetworkGraph.line(x4,y4)
	NetworkGraph.flush()
}

////////////////////////////////////////////////////////////////////////////////

proc ChoiceBoxLv1() { local i,defaultflag
	xpanel("")
		xlabel("Choose a cell for display and changing properties (pre-synaptic):")
			for i=0,CellNum-1 {
				if (i==0) {defaultflag=1} else {defaultflag=0}
				sprint(tstr,"xradiobutton(\"%s  (CPGCellList.o(%d)\",\" {GraphDeckObj.flip_to(%d) cclDeckObj.flip_to(%d) ResetChoiceBoxLv2Deck(%d) ChoiceBoxLv2DeckObj.flip_to(%d) SynPropertyDeckObj.flip_to(0)}\",%d)",CPGCellList.o(i).name,i,i,i,i,i,defaultflag)
				execute(tstr)
			}
		xlabel(" ")
	xpanel()
}

objref ChoiceBoxLv2DeckObj

proc ChoiceBoxLv2Deck() { local i
	ChoiceBoxLv2DeckObj = new Deck()
	for i=0,CellNum-1 {
		ChoiceBoxLv2DeckObj.intercept(1)
			ChoiceBoxLv2(i)
		ChoiceBoxLv2DeckObj.intercept(0)
	}
	ChoiceBoxLv2DeckObj.map()
	ChoiceBoxLv2DeckObj.flip_to(0)
}

proc ResetChoiceBoxLv2Deck() { local i
	for i=0,CellNum-1 {
		ChoiceBoxLv2DeckObj.remove_last()
	}
	for i=0,CellNum-1 {
		ChoiceBoxLv2DeckObj.intercept(1)
			ChoiceBoxLv2(i)
		ChoiceBoxLv2DeckObj.intercept(0)
	}
	ChoiceBoxLv2DeckObj.flip_to($1)
}

proc ChoiceBoxLv2() { local i,j,defaultflag,k
	i = $1
	xpanel("")
		sprint(tstr,"xlabel(\"Synapse from %s to (post-synaptic):\")",CPGCellList.o(i).name)
		execute(tstr)
		defaultflag = 1
		k = 0
		for j=0,CellNum-1 {
			if (i!=j) {
				sprint(tstr,"xradiobutton(\"%s  (CPGCellList.o(%d))\",\" SynPropertyDeckObj.flip_to(%d)\",%d)",CPGCellList.o(j).name,j,i*(CellNum-1)+k+1,0)
				execute(tstr)
				defaultflag = 0
				k += 1
			}
		}
		xlabel(" ")
	xpanel()
}

objref SynPropertyDeckObj
SynPropertyDeckObj = new Deck()

proc SynPropertyDeck() { local i,pre,post
	SynPropertyDeckObj.intercept(1)
		xpanel("")
			xlabel("  ")
			xlabel("  ***********************************************")
			xlabel("  Choose pre-synaptic and post-synaptic cells ")
			xlabel("  Parameters can then be modified")
			xlabel("  using another GUI that will come up below.")
			xlabel("  ***********************************************")
		xpanel()
	SynPropertyDeckObj.intercept(0)
	for i=0,CellNum*(CellNum-1)-1 {
		SynPropertyDeckObj.intercept(1)
		pre = ExtSynConList.o(i).pre_index
		post = ExtSynConList.o(i).post_index
			xpanel("")
				sprint(tstr,"Parameters of the synapse from %s to %s",CPGCellList.o(pre).name,CPGCellList.o(post).name)
				xlabel(tstr)
				xlabel("Excitatory")
				sprint(tstr,"ExtSynConList.o(%d).syn.w",i)
				sprint(tstr0,"UpdateExtw(%d)",i)
				xvalue("weight",tstr,1,tstr0)
				sprint(tstr,"ExtSynConList.o(%d).syn.gmax",i)
				xvalue("gmax (uS)",tstr,1,"")
				sprint(tstr,"ExtSynConList.o(%d).syn.tau",i)
				xvalue("tau (ms)",tstr,1,"")
				sprint(tstr,"ExtSynConList.o(%d).syn.eext",i)
				xvalue("reverse potential (mV)",tstr,1,"")
				xlabel("Inhibitory")
				sprint(tstr,"InhSynConList.o(%d).syn.w",i)
				sprint(tstr0,"UpdateInhw(%d)",i)
				xvalue("weight",tstr,1,tstr0)
				sprint(tstr,"InhSynConList.o(%d).syn.gmax",i)
				xvalue("gmax (uS)",tstr,1,"")
				sprint(tstr,"InhSynConList.o(%d).syn.tau",i)
				xvalue("tau (ms)",tstr,1,"")
				sprint(tstr,"InhSynConList.o(%d).syn.einh",i)
				xvalue("reverse potential (mV)",tstr,1,"")
			xpanel()
		SynPropertyDeckObj.intercept(0)
	}
	SynPropertyDeckObj.map()
	SynPropertyDeckObj.flip_to(0)
}

////////////////////////////////////////////////////////////////////////////////

objref cclDeckObj
cclDeckObj = new Deck()

proc cclDeck() { local i
	for i=0,CellNum-1 {
		cclDeckObj.intercept(1)
			nrnpointmenu(CPGCellList.o(i).ccl)
		cclDeckObj.intercept(0)
	}
	cclDeckObj.map()
	cclDeckObj.flip_to(0)
}

////////////////////////////////////////////////////////////////////////////////

proc UpdateExtw() { local i,pre,post
	i = $1
	pre = ExtSynConList.o(i).pre_index
	post = ExtSynConList.o(i).post_index
	sprint(tstr,"Draw%s2%s",CPGCellList.o(pre).name,CPGCellList.o(post).name)
	if (ExtSynConList.o(i).syn.w < 0) {
		ExtSynConList.o(i).syn.w = 0
	} else if (ExtSynConList.o(i).syn.w == 0 && InhSynConList.o(i).syn.w == 0) {
		sprint(tstr0,"%s(%d)",tstr,0)
		execute(tstr0)
	} else if (ExtSynConList.o(i).syn.w > 0) {
		InhSynConList.o(i).syn.w = 0
		sprint(tstr0,"%s(%d)",tstr,2)
		execute(tstr0)
	} 
}

proc UpdateInhw() { local i,pre,post
	i = $1
	pre = InhSynConList.o(i).pre_index
	post = InhSynConList.o(i).post_index
	sprint(tstr,"Draw%s2%s",CPGCellList.o(pre).name,CPGCellList.o(post).name)
	if (InhSynConList.o(i).syn.w < 0) {
		InhSynConList.o(i).syn.w = 0
	} else if (ExtSynConList.o(i).syn.w == 0 && InhSynConList.o(i).syn.w == 0) {
		sprint(tstr0,"%s(%d)",tstr,0)
		execute(tstr0)
	} else if (InhSynConList.o(i).syn.w > 0) {
		ExtSynConList.o(i).syn.w = 0
		sprint(tstr0,"%s(%d)",tstr,1)
		execute(tstr0)
	} 
}

proc RemoveAllCon() { local i
	for i=0,CellNum*(CellNum-1)-1 {
		sprint(tstr,"ExtSynConList.o(%d).syn.w=0",i)
		execute(tstr)
		sprint(tstr,"UpdateExtw(%d)",i)
		execute(tstr)
		sprint(tstr,"InhSynConList.o(%d).syn.w=0",i)
		execute(tstr)
		sprint(tstr,"UpdateInhw(%d)",i)
		execute(tstr)
	}
	for i=0,CellNum-1 {
		CPGCellList.o(i).ccl.del = 0
		CPGCellList.o(i).ccl.dur = 1000
		CPGCellList.o(i).ccl.amp = 0.2
	}
}

proc RestoreDefaultWgt() {
	InitializeAllw()
	InitializeAllccl()
	InitDrawAllConnections()
}

proc WaveofAct() {
	RemoveAllCon()
	for i = 0,11 {
		ExtSynConList.o(i).syn.w = 0
		InhSynConList.o(0).syn.w = 0
	}

	ExtSynConList.o(0).syn.w = 40
	ExtSynConList.o(3).syn.w = 40
	ExtSynConList.o(4).syn.w = 40
	ExtSynConList.o(7).syn.w = 40
	ExtSynConList.o(8).syn.w = 40
	ExtSynConList.o(11).syn.w = 40
	
	for i=0,CellNum-1 {
		CPGCellList.o(i).ccl.del = 100
		CPGCellList.o(i).ccl.dur = 5
		CPGCellList.o(i).ccl.amp = 0
	}
		CPGCellList.o(0).ccl.amp = 0.2
	
	/*DrawL12L2(2)
	DrawL22L1(2)
	DrawL22R1(2)
	DrawR12L2(2)
	DrawR12R2(2)
	DrawR22R1(2)*/
	for i = 0,11 {
		sprint(tstr,"UpdateInhw(%d)",i)
		execute(tstr)
		sprint(tstr,"UpdateExtw(%d)",i)
		execute(tstr)
	}
}

proc Walk() {
	RemoveAllCon()
	for i = 0,11 {
		ExtSynConList.o(i).syn.w = 0
		InhSynConList.o(0).syn.w = 0
	}
	/*
	ExtSynConList.o(0).syn.w = default_syn_wgt
	ExtSynConList.o(4).syn.w = default_syn_wgt
	ExtSynConList.o(9).syn.w = default_syn_wgt
	ExtSynConList.o(8).syn.w = default_syn_wgt
	
	InhSynConList.o(2).syn.w = default_syn_wgt
	InhSynConList.o(1).syn.w = default_syn_wgt
	InhSynConList.o(3).syn.w = default_syn_wgt
	InhSynConList.o(5).syn.w = default_syn_wgt
	InhSynConList.o(6).syn.w = default_syn_wgt
	InhSynConList.o(11).syn.w = default_syn_wgt
	InhSynConList.o(7).syn.w = default_syn_wgt
	InhSynConList.o(10).syn.w = default_syn_wgt
	*/
	
	ExtSynConList.o(2).syn.w = default_syn_wgt
	ExtSynConList.o(3).syn.w = default_syn_wgt
	ExtSynConList.o(7).syn.w = default_syn_wgt
	ExtSynConList.o(11).syn.w = default_syn_wgt
	
	InhSynConList.o(0).syn.w = default_syn_wgt
	InhSynConList.o(1).syn.w = default_syn_wgt
	InhSynConList.o(4).syn.w = default_syn_wgt
	InhSynConList.o(5).syn.w = default_syn_wgt
	InhSynConList.o(6).syn.w = default_syn_wgt
	InhSynConList.o(8).syn.w = default_syn_wgt
	InhSynConList.o(9).syn.w = default_syn_wgt
	InhSynConList.o(10).syn.w = default_syn_wgt
	
	
	for i=0,CellNum-1 {
		CPGCellList.o(i).ccl.del = 100
		CPGCellList.o(i).ccl.dur = 5
		CPGCellList.o(i).ccl.amp = 0
	}
		CPGCellList.o(1).ccl.amp = 0.2
	
	for i = 0,11 {
		sprint(tstr,"UpdateInhw(%d)",i)
		execute(tstr)
		sprint(tstr,"UpdateExtw(%d)",i)
		execute(tstr)
	}
}

proc Trot() {
	RemoveAllCon()
	for i = 0,11 {
		ExtSynConList.o(i).syn.w = 0
		InhSynConList.o(0).syn.w = 0
	}

	
	
	ExtSynConList.o(2).syn.w = default_syn_wgt
	ExtSynConList.o(4).syn.w = default_syn_wgt
	ExtSynConList.o(7).syn.w = default_syn_wgt
	ExtSynConList.o(9).syn.w = default_syn_wgt
	
	InhSynConList.o(0).syn.w = default_syn_wgt
	InhSynConList.o(1).syn.w = default_syn_wgt
	InhSynConList.o(3).syn.w = default_syn_wgt
	InhSynConList.o(5).syn.w = default_syn_wgt
	InhSynConList.o(6).syn.w = default_syn_wgt
	InhSynConList.o(8).syn.w = default_syn_wgt
	InhSynConList.o(10).syn.w = default_syn_wgt
	InhSynConList.o(11).syn.w = default_syn_wgt
	
	for i=0,CellNum-1 {
		CPGCellList.o(i).ccl.del = 100
		CPGCellList.o(i).ccl.dur = 5
		CPGCellList.o(i).ccl.amp = .2
	}
		CPGCellList.o(0).ccl.del = 100
		CPGCellList.o(3).ccl.del = 100
		CPGCellList.o(1).ccl.del = 110
		CPGCellList.o(2).ccl.del = 110
	
	for i = 0,11 {
		sprint(tstr,"UpdateInhw(%d)",i)
		execute(tstr)
		sprint(tstr,"UpdateExtw(%d)",i)
		execute(tstr)
	}
}

proc Pace() {
	RemoveAllCon()
	for i = 0,11 {
		ExtSynConList.o(i).syn.w = 0
		InhSynConList.o(0).syn.w = 0
	}
	
	for i=0,CellNum-1 {
		CPGCellList.o(i).ccl.del = 100
		CPGCellList.o(i).ccl.dur = 5
		CPGCellList.o(i).ccl.amp = .2
	}
		CPGCellList.o(0).ccl.del = 100
		CPGCellList.o(1).ccl.del = 100
		CPGCellList.o(2).ccl.del = 110
		CPGCellList.o(3).ccl.del = 110
	
	for i = 0,11 {
		sprint(tstr,"UpdateInhw(%d)",i)
		execute(tstr)
		sprint(tstr,"UpdateExtw(%d)",i)
		execute(tstr)
	}
}

////////////////////////////////////////////////////////////////////////////////

CPGMain()
Walk()